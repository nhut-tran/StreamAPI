// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StreamAPI.Infrastructure.Database;

#nullable disable

namespace StreamAPI.Infrastructure.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250712080341_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StreamAPI.Domain.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_episodes");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_episodes_season_id");

                    b.ToTable("episodes", (string)null);
                });

            modelBuilder.Entity("StreamAPI.Domain.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genres");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("StreamAPI.Domain.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<int>("category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.HasKey("Id")
                        .HasName("pk_media");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_media_public_id");

                    b.ToTable("media", null, t =>
                        {
                            t.Property("category")
                                .HasColumnName("category1");
                        });

                    b.HasDiscriminator<int>("category");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StreamAPI.Domain.MediaGenre", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("integer")
                        .HasColumnName("media_id");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.HasKey("MediaId", "GenreId")
                        .HasName("pk_media_genres");

                    b.HasIndex("GenreId")
                        .HasDatabaseName("ix_media_genres_genre_id");

                    b.ToTable("media_genres", (string)null);
                });

            modelBuilder.Entity("StreamAPI.Domain.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<int>("TvShowId")
                        .HasColumnType("integer")
                        .HasColumnName("tv_show_id");

                    b.HasKey("Id")
                        .HasName("pk_seasons");

                    b.HasIndex("TvShowId")
                        .HasDatabaseName("ix_seasons_tv_show_id");

                    b.ToTable("seasons", (string)null);
                });

            modelBuilder.Entity("StreamAPI.Domain.Movie", b =>
                {
                    b.HasBaseType("StreamAPI.Domain.Media");

                    b.ToTable("media", null, t =>
                        {
                            t.Property("category")
                                .HasColumnName("category1");
                        });

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("StreamAPI.Domain.TvShow", b =>
                {
                    b.HasBaseType("StreamAPI.Domain.Media");

                    b.ToTable("media", null, t =>
                        {
                            t.Property("category")
                                .HasColumnName("category1");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("StreamAPI.Domain.Episode", b =>
                {
                    b.HasOne("StreamAPI.Domain.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_episodes_seasons_season_id");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("StreamAPI.Domain.MediaGenre", b =>
                {
                    b.HasOne("StreamAPI.Domain.Genre", "Genre")
                        .WithMany("MediaGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_genres_genres_genre_id");

                    b.HasOne("StreamAPI.Domain.Media", "Media")
                        .WithMany("Genres")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_genres_media_media_id");

                    b.Navigation("Genre");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("StreamAPI.Domain.Season", b =>
                {
                    b.HasOne("StreamAPI.Domain.TvShow", "TvShow")
                        .WithMany("Seasons")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_seasons_tv_shows_tv_show_id");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("StreamAPI.Domain.Genre", b =>
                {
                    b.Navigation("MediaGenres");
                });

            modelBuilder.Entity("StreamAPI.Domain.Media", b =>
                {
                    b.Navigation("Genres");
                });

            modelBuilder.Entity("StreamAPI.Domain.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("StreamAPI.Domain.TvShow", b =>
                {
                    b.Navigation("Seasons");
                });
#pragma warning restore 612, 618
        }
    }
}
